//! Autogenerated weights for `pallet_laws`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-11, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_laws
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./target/release/pallet_laws.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for this pallet
pub trait WeightInfo {
	fn create() -> Weight;
	fn edit() -> Weight;
	fn upvote() -> Weight;
	fn downvote() -> Weight;
	fn remove() -> Weight;
}

/// Weights for pallet_letters using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Laws Laws (r:1 w:1)
        fn create() -> Weight {
                (47_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Laws Laws (r:1 w:1)
        fn edit() -> Weight {
                (49_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Laws Laws (r:1 w:1)
        fn upvote() -> Weight {
                (49_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Laws Laws (r:1 w:1)
        fn downvote() -> Weight {
                (48_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Laws Laws (r:1 w:1)
        fn remove() -> Weight {
                (47_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Laws Laws (r:1 w:1)
        fn create() -> Weight {
                (47_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Laws Laws (r:1 w:1)
        fn edit() -> Weight {
                (49_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Laws Laws (r:1 w:1)
        fn upvote() -> Weight {
                (49_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Laws Laws (r:1 w:1)
        fn downvote() -> Weight {
                (48_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
        // Storage: Laws Laws (r:1 w:1)
        fn remove() -> Weight {
                (47_000_000 as Weight)
                        .saturating_add(RocksDbWeight::get().reads(1 as Weight))
                        .saturating_add(RocksDbWeight::get().writes(1 as Weight))
        }
}
